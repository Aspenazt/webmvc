{"apiVersion":"v1","kind":"Template","metadata":{"annotations":{"description":"# Spring-Boot Web MVC QuickStart\n\nThis example demonstrates how you can use Spring Boot and Spring MVC with as standalone Docker\nContainer based on [fabric8's base images](https://github.com/fabric8io/base-images#java-base-images)\nThe quickstart uses Spring Boot to configure a little Spring MVC application that offers a REST service.\n\n\n### Building\n\nThe example can be built with\n\n    mvn clean install\n\n\n### Running the example locally\n\nThe example can be run locally using the following Maven goal:\n\n    mvn spring-boot:run\n\nThen you can access the service using the following url from a web browser:\n\n    http://localhost:8080/ip\n\n\n### Running the example in fabric8\n\nIt is assumed a running Kubernetes platform is already running. If not you can find details how to [get started](http://fabric8.io/guide/getStarted/index.html).\n\nThe example can be built and deployed using a single goal:\n\n    mvn -Pf8-local-deploy\n\nWhen the example runs in fabric8, you can use the OpenShift client tool to inspect the status\n\nTo list all the running pods:\n\n    oc get pods\n\nThen find the name of the pod that runs this quickstart, and output the logs from the running pods with:\n\n    oc logs <name of pod>\n\nYou can also use the fabric8 [web console](http://fabric8.io/guide/console.html) to manage the\nrunning pods, and view logs and much more.\n\n\n### Access services using a web browser\n\nWhen the application is running, you can use a web browser to access the REST service. Assuming that you\nhave a [Vagrant setup](http://fabric8.io/guide/getStarted/vagrant.html) you can access the REST service with\n`http://springboot-webmvc-default.vagrant.f8`.\n\nNotice: As it depends on your OpenShift setup, the hostname (route) might vary. Verify with `oc get routes` which\nhostname is valid for you.\n\nThe URL `http://springboot-webmvc-default.vagrant.f8/ip` can be used to obtain the IP address to show service load-balancing\nwhen running with multiple pods.\n\n\n### More details\n\nYou can find more details about running this [quickstart](http://fabric8.io/guide/quickstarts/running.html) on the website. This also includes instructions how to change the Docker image user and registry.\n\n","fabric8.springboot-webmvc/iconUrl":"img/icons/spring-boot.svg","fabric8.springboot-webmvc/summary":"Shows how to use Spring Boot with WebMVC in the Java Container"},"creationTimestamp":"2016-05-24T16:21:56Z","name":"springboot-webmvc","namespace":"default","resourceVersion":"3022","selfLink":"/oapi/v1/namespaces/default/templates/springboot-webmvc","uid":"a21efe38-21cb-11e6-b403-080027b5c2f4"},"objects":[{"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"fabric8.io/iconUrl":"img/icons/spring-boot.svg"},"labels":{"project":"springboot-webmvc","provider":"fabric8","version":"2.3-SNAPSHOT","group":"quickstarts"},"name":"springboot-webmvc"},"spec":{"deprecatedPublicIPs":[],"externalIPs":[],"ports":[{"port":80,"protocol":"TCP","targetPort":8080}],"selector":{"project":"springboot-webmvc","provider":"fabric8","group":"quickstarts"},"type":"LoadBalancer"}},{"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{"fabric8.io/iconUrl":"img/icons/spring-boot.svg","fabric8.io/build-url":"http://jenkins.vagrant.f8/job/oss-parent"},"labels":{"project":"springboot-webmvc","provider":"fabric8","version":"2.3-SNAPSHOT","group":"quickstarts"},"name":"springboot-webmvc"},"spec":{"replicas":1,"selector":{"project":"springboot-webmvc","provider":"fabric8","version":"2.3-SNAPSHOT","group":"quickstarts"},"template":{"metadata":{"annotations":{},"labels":{"project":"springboot-webmvc","provider":"fabric8","version":"2.3-SNAPSHOT","group":"quickstarts"}},"spec":{"containers":[{"args":[],"command":[],"env":[{"name":"KUBERNETES_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"fabric8/springboot-webmvc:2.3-SNAPSHOT","name":"springboot-webmvc","ports":[{"containerPort":8778,"name":"jolokia"}],"readinessProbe":{"httpGet":{"httpHeaders":[],"path":"/","port":8080},"initialDelaySeconds":5,"timeoutSeconds":30},"securityContext":{},"volumeMounts":[]}],"imagePullSecrets":[],"nodeSelector":{},"volumes":[]}}}}],"parameters":[]}